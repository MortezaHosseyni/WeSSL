<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAA
        AHEGCxjrBgsY7AAAAHUAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABYBAQOSER9F9S5VvP8uVr7/ESBH9gECA5UAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAkAwUKtBkvZ/43ZuH/N2bh/zdl4P83Z+L/GjBq/gMFC7cAAAAnAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAALwQIEcYgO4L/Omzt/y1TuP8PIUH/DiA//yxStv86bO7/IDyF/wQIEskAAAAyAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAADIFCRXOI0KR/ztt8P8mR57/DSQ5/xd2mv8YeJ3/CyQ5/yZFm/87bfD/JESV/wUK
        FtAAAAA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAsBQkUzCRElf87bfD/Ij+O/xszP/9WrcD/Psb2/yW38v8cjLj/Cyo9/yI+
        i/87bfD/JUWY/wUKFc8AAAAvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHwQHD8EiQI3/O23w/yE9iv8eOEP/ZsDP/3/v//9z5f3/P8X0/yW3
        8v8elsX/Cy5B/yE8hv87bfD/I0KR/wQHEMQAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABACAwaoHTd5/ztt8P8jQZL/HTdC/2jE0v9/7v//fev//37s
        //9z5f3/PcTz/yW38v8fmMj/Cy1A/yNAj/87bfD/Hjl9/wIDB6wAAAARAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAgRYpWvw5aur/KEun/xkwPf9lvcz/f+7//33r
        //996///fev//37s//9w4/3/OMDz/yS38v8elML/Cyg7/yhKpP85a+v/Fypd/QAAAIQAAAAEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwNGDXuNGHW/zBZxf8VJjv/XKy5/3/v
        //9+7P//fuz//37s//9+7P//fuz//3/t//9q4fz/ML3y/yW48/8bh7H/DCI6/y9Xwf81Ytj/DRk38AAA
        AFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcBQkUySpOrP83Z+T/FCVL/0qM
        lf954/b/cdXo/3HV6P9x1ej/cdXo/3HV6P9x1ej/cdXo/3LW6P9RwuL/I6Xa/yOu5/8Wb5D/GTht/zxw
        9v8qT67/BQoVzAAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAIMaMGv/Om3w/x02
        ef8xXWX/bMvb/yxOU/8jMS7/JDMw/yQzMP8kMzD/JDMw/yQzMP8kMzD/JDMw/yMyMP8YKi3/EDxM/yCd
        zv8kldL/Ll7C/zps7v8bMm7/AAAAhwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxChMp5DNg
        0/8tVLz/GjA//23O3f9Yp7b/LCcZ/3hiOf96ZDr/emQ6/3ljOf96Yzr/emQ6/3ljOf96Yzr/e2Q7/3pj
        Ov8sJxn/GH2m/yKq4P8NL0b/LVO4/zRh1f8LFCzmAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AZQgO4P/Omvt/xYpVf9LjZb/gfL//1ShsP80LR3/lH5R/8G0kP/Gupf/pZFn/8Cyjv/Hupj/o5Bl/8O1
        kv/Hu5j/oY1i/zQtHP8XeaH/Jrr1/xZvkf8UJ1L/OWvs/yE9hv8BAQKYAAAAAwAAAAAAAAAAAAAAAAAA
        AAAAAAAsChMq5DRi2P8pTaz/IkBL/3Xc7f+A8P//VaKw/zMtHP+TfVD/qJVs/8m+nf/CtZP/ppNq/8i8
        m//Hu5r/0siq/6GOY/+Rekz/NS0c/xl6ov8mufT/I6vh/ww0Sf8pTKj/NWPa/wsULeYAAAAvAAAAAAAA
        AAAAAAAAAQIEAAAAAHocNHP/Omzu/xYqV/9PlZ//f+///3/v//9VorD/NC0d/494Sv/DtpP/0seo/6KO
        ZP/Bs5D/0sio/6qYcP/OxKT/kXpM/4tzRP83Lx3/MYmm/yi69P8luPP/F3WZ/xQoVP86bO3/HTZ2/wAA
        AH8CAwcAAAAAAAAAAAAAAAAPBQkUxS5Wvf8vV8P/HTdF/3LX6P9+7P//f+///1WisP8zLBz/mYRY/9rS
        tP+yonv/pZJp/9nRs/+zo3z/pJBn/8/Epf+Se03/i3NE/zYvHf9Kmar/NsL2/yS18P8ip9z/DC5D/y9W
        wP8vV8H/BQoWyQAAABEAAAAAAAAAAAAAADoPHT/xOWro/x44ff88cXn/fu3//33r//9/7///VKGw/zUu
        Hf+Pd0j/rZty/7ytiP+diFv/rJlw/7ytiP+hjGH/qZZs/5B5Sf+Odkb/Ni8d/1OerP9P0fv/JLTv/yW3
        8f8SWnb/Hjd6/zlq6v8QHkLyAAAAPQAAAAAAAAEAAAAAcBw0c/85auv/FihN/12vu/9/7v//fev//3/v
        //9Zqbn/JyQZ/2ZUMf9lUzD/ZlMv/2ZSL/9mUi7/ZVEt/2ZSL/9nVDD/Z1Uy/2ZUMf8oJBn/WKe1/2bf
        /v8ot+//Jbfy/xuJs/8RJUr/OWrq/x02dv8AAAB1AAABAAAAAAIBAwaiKEqj/zJe0P8bM0X/ctXm/37s
        //996///fuz//3Xc7/8tVVz/IyEg/y4tK/8XJyj/K0tP/ypKTv8qSk7/K0tP/xgoKf8tLCr/JCIh/yxS
        Wf912+7/dOb+/zG88f8ktfD/Iqba/wwrQ/8yXc7/KUyn/wIDB6YAAAADAAAADwYKF8UwWsb/KUyt/ypO
        WP975/r/fev//33r//996///gPD//1Cbp/9lZmb/iIaG/zxyfP986f7/eub6/3rm+v986f7/PXaB/4SD
        gv9oaWn/Tpei/4Dw//966f//PcTz/yS07/8ls+z/Dj9W/ylMqf8xXMr/BgsZyQAAABIAAAAgChIo2zVk
        2/8hPoz/OWtz/3/v//996///fev//33r//9/7///UJuo/2VmZ/+Ni4v/PHN7/3/v//996///fev//3/v
        //8+doD/iYeH/2lqav9Ol6T/f+///37r//9Jy/b/I7Tv/ya59P8RVnH/IT2I/zZl3v8KEyreAAAAIwAA
        ADANGTboOGnn/yRClP8fOkH/Zr/O/37t//996///fev//3/u//9arbz/UFRV/6ako/8tT1X/eeT1/3/u
        //9/7v//euX2/y5RWP+joaH/U1dX/1iquP+A7///deb+/0DG9P8ktvH/HpXE/wovP/8jQZD/OWrp/w4a
        OeoAAAAzAAAAMgsVLukzX9H/OWvr/yE+jP8YLj3/XrK//37t//996///fuz//3HW6P8tQ0f/tLKy/1VY
        Wf83bHX/Z8TV/2jF1v85bnj/UlVW/7a0tP8uQkb/cdTm/27j/v87w/P/Jrfx/xyJtP8LJzv/Ij2J/zlr
        6/8zYNT/DBYx6wAAADYAAAAMAQIEigwWMe0lRpr/Om3v/yhKqP9Beqb/fOr+/33s//996///fu3//0qO
        mf9IS0z/vr29/3Jzc/88R0n/PEdJ/3Bxcf++vb3/S01O/0mLlv9y5f7/OMDy/yS28f8fmcn/Cyg8/ydH
        n/87bfD/Jked/wwXMu4BAgWOAAAADQAAAAAAAAAEAAAAPQMGDcAfOX7/O27y/zdm0P8/dof/eeT2/33r
        //997P//euX4/0B6hP87QkP/kY+P/7Gurv+xrq7/kpCQ/zxDRP8/d4H/d+P2/0bK9v8kte//JLHq/w5F
        XP8fOX//O23w/yA7gf8DBg7CAAAAPwAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAIQQHEMQoSqP/NmXh/xQl
        Rf9esL3/f+7//33r//997P//fOn7/1yvvv81ZG3/L0tQ/y9LUP81Y2v/W628/33p+/9m3vv/Kbjw/yW3
        8v8cirX/DyND/zdm4f8pTKf/BAgRxwAAACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASBAd
        QfI4aef/IDuF/zlrc/9/7///f+7//3/u//9/7v//gPH//3/v//965vn/eub5/3/v//+A8f//f+7//0rO
        +P8kt/L/Jrnz/xFVcP8gOoH/OWrp/xEfRPQAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAMBAgRvi1Uuf8vWMP/Fik1/zxxef8+dH3/PnR9/z50ff8+dH3/PnR9/z51fv8+dX7/PnR9/z50
        ff88c33/HWB3/xFZdf8RV3L/CSIz/y9WwP8uVr3/BQkTwgAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAIDBwAAAACLIkCN/zpu8P8nSKD/HzqD/x86hP8fOoT/HzqE/x86hP8fOoT/HzqE/x86
        hP8fOoT/HzqE/x86hP8gO4T/ITuE/yE6g/8nSJ7/Om3v/yNCkf8AAACPAwUMAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGoZLmX/NmTd/zZl3v82Zd//NmXf/zZl3/82Zd//NmXf/zZl
        3/82Zd//NmXf/zZl3/82Zd//NmXf/zZl3/82Zd//NmXf/zZl3v82ZN7/GS9p/wAAAG4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgQIEt4KFCr/ChQr/woUK/8KFCv/ChQr/woU
        K/8KFCv/ChQr/woUK/8KFCv/ChQr/woUK/8KFCv/ChQr/woUK/8KFCv/ChQr/woUK/8ECBLgAAAANQAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gf///wD///4Af//8AD//+AAf//AAD//gAAf/wAAD/4AAAf+AAAH/AA
        AA/gAAAH4AAAB8AAAAPAAAADwAAAA4AAAAGAAAABgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAA
        AAHgAAAH8AAAD/AAAA/4AAAf+AAAH/gAAB8=
</value>
  </data>
</root>